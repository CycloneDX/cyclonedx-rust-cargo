/*
 * This file is part of CycloneDX Rust Cargo.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

use crate::external_models::normalized_string::NormalizedString;
use crate::models::vulnerability_source::VulnerabilitySource;
use crate::validation::{
    Validate, ValidationContext, ValidationError, ValidationPathComponent, ValidationResult,
};

/// References a vulnerability equivalent to the vulnerability specified, e.g.
/// to correlate vulnerabilities across multiple sources of vulnerability intelligence.
///
/// Defined via the [XML schema](https://cyclonedx.org/docs/1.4/xml/#type_vulnerabilityType)
#[derive(Debug, PartialEq, Eq)]
pub struct VulnerabilityReference {
    pub id: NormalizedString,
    pub vulnerability_source: VulnerabilitySource,
}

/// Construct a `VulnerabilityReference` with an id and `VulnerabilitySource`
/// ```
/// use cyclonedx_bom::external_models::uri::{Uri, UriError};
/// use cyclonedx_bom::models::vulnerability_reference::VulnerabilityReference;
/// use cyclonedx_bom::models::vulnerability_source::VulnerabilitySource;
/// use std::convert::TryFrom;
///
/// let uri = Uri::try_from("https://example.com".to_string())?;
/// let source = VulnerabilitySource::new(Some("Example Org".to_string()), Some(uri));
/// let reference = VulnerabilityReference::new("12a34a5b-6780-1bae-2345-67890cfe12a3", source);
/// # Ok::<(), UriError>(())
/// ```
impl VulnerabilityReference {
    pub fn new(id: &str, source: VulnerabilitySource) -> Self {
        Self {
            id: NormalizedString::new(id),
            vulnerability_source: source,
        }
    }
}

impl Validate for VulnerabilityReference {
    fn validate_with_context(
        &self,
        context: ValidationContext,
    ) -> Result<ValidationResult, ValidationError> {
        let mut results: Vec<ValidationResult> = vec![];

        let id_context = context.extend_context_with_struct_field("VulnerabilityReference", "id");

        results.push(self.id.validate_with_context(id_context)?);

        let source_context = context
            .extend_context_with_struct_field("VulnerabilityReference", "vulnerability_source");

        results.push(
            self.vulnerability_source
                .validate_with_context(source_context)?,
        );

        Ok(results
            .into_iter()
            .fold(ValidationResult::default(), |acc, result| acc.merge(result)))
    }
}

#[derive(Debug, PartialEq, Eq)]
pub struct VulnerabilityReferences(pub Vec<VulnerabilityReference>);

impl Validate for VulnerabilityReferences {
    fn validate_with_context(
        &self,
        context: ValidationContext,
    ) -> Result<ValidationResult, ValidationError> {
        let mut results: Vec<ValidationResult> = vec![];

        for (index, vulnerability_reference) in self.0.iter().enumerate() {
            let context = context.extend_context(vec![ValidationPathComponent::Array { index }]);
            results.push(vulnerability_reference.validate_with_context(context)?);
        }

        Ok(results
            .into_iter()
            .fold(ValidationResult::default(), |acc, result| acc.merge(result)))
    }
}

#[cfg(test)]
mod test {
    use crate::{
        external_models::{normalized_string::NormalizedString, uri::Uri},
        models::vulnerability_source::VulnerabilitySource,
        validation::FailureReason,
    };

    use super::*;
    use pretty_assertions::assert_eq;

    #[test]
    fn valid_vulnerability_references_should_pass_validation() {
        let validation_result = VulnerabilityReferences(vec![VulnerabilityReference {
            id: NormalizedString::new("id"),
            vulnerability_source: VulnerabilitySource {
                name: Some(NormalizedString::new("name")),
                url: Some(Uri("https://www.example.com".to_string())),
            },
        }])
        .validate_with_context(ValidationContext::default())
        .expect("Error while validating");

        assert_eq!(validation_result, ValidationResult::Passed);
    }

    #[test]
    fn invalid_vulnerability_references_should_fail_validation() {
        let validation_result = VulnerabilityReferences(vec![VulnerabilityReference {
            id: NormalizedString("invalid\tid".to_string()),
            vulnerability_source: VulnerabilitySource {
                name: Some(NormalizedString("invalid\tname".to_string())),
                url: Some(Uri("invalid url".to_string())),
            },
        }])
        .validate_with_context(ValidationContext::default())
        .expect("Error while validating");

        assert_eq!(
            validation_result,
            ValidationResult::Failed {
                reasons: vec![
                    FailureReason {
                        message:
                            "NormalizedString contains invalid characters \\r \\n \\t or \\r\\n"
                                .to_string(),
                        context: ValidationContext(vec![
                            ValidationPathComponent::Array { index: 0 },
                            ValidationPathComponent::Struct {
                                struct_name: "VulnerabilityReference".to_string(),
                                field_name: "id".to_string()
                            },
                        ])
                    },
                    FailureReason {
                        message:
                            "NormalizedString contains invalid characters \\r \\n \\t or \\r\\n"
                                .to_string(),
                        context: ValidationContext(vec![
                            ValidationPathComponent::Array { index: 0 },
                            ValidationPathComponent::Struct {
                                struct_name: "VulnerabilityReference".to_string(),
                                field_name: "vulnerability_source".to_string()
                            },
                            ValidationPathComponent::Struct {
                                struct_name: "VulnerabilitySource".to_string(),
                                field_name: "name".to_string()
                            },
                        ])
                    },
                    FailureReason {
                        message: "Uri does not conform to ISO 8601".to_string(),
                        context: ValidationContext(vec![
                            ValidationPathComponent::Array { index: 0 },
                            ValidationPathComponent::Struct {
                                struct_name: "VulnerabilityReference".to_string(),
                                field_name: "vulnerability_source".to_string()
                            },
                            ValidationPathComponent::Struct {
                                struct_name: "VulnerabilitySource".to_string(),
                                field_name: "url".to_string()
                            },
                        ])
                    },
                ]
            }
        );
    }
}
